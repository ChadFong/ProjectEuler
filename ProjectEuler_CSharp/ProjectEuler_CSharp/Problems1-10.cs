using System;
using System.Linq;
using System.Collections.Generic;

namespace ProjectEuler_CSharp
{
	public class Problems_1_Thru_10
	{
//		Problem #1:
		public static int Multiples3and5 ()
		{
//			If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
//			The sum of these multiples is 23.
//			Find the sum of all the multiples of 3 or 5 below 1000.

//			Collect all multiples from 0 to 1000:
			List<int> multiples = new List<int> ();
			for (int i = 3; i < 1000; i++) 
			{
				if( i % 3 == 0 || i % 5 == 0 )
				{
					multiples.Add(i);
				}
			}

//			Sum all numbers in collection:
			return multiples.Aggregate ((current, total) => current + total);
		}

//		Problem #2:
		public static long EvenFib ()
		{
//			Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
//			By starting with 1 and 2, the first 10 terms will be:
//				1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//			By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

			int a = 1, b = 2, temp;
			long result = 0;
			while( b < 4000000 )
			{
				if( b % 2 == 0 )
				{
					result += b;
			    }
                temp = a + b;
                a = b;
                b = temp;
			}
            return result;
		}

//      Problem #3:
        public static uint LargestPrime(long n)
        {
//          The prime factors of 13195 are 5, 7, 13 and 29.
//          What is the largest prime factor of the number 600851475143 ?

            uint largestPrimeFactor = 1;

            // In order to determine all prime numbers from 0 to n, we only need to check them against
            // values from 0 to √n.  If they are not divisible by any of these numbers, then they are prime.
            uint sqrtN = (uint)Math.Floor (Math.Sqrt(n));

            // We create a filter list which contains all primes from 0 to √n. We can use this to check if a number
            // between 0 and n is prime.
              // We will start our List with 2, so that we only need to iterate on odd numbers.
            List<uint> filter = new List<uint>(new uint[] {2});

            // We create the filter list from 0 -> √n, the only numbers we need to check all future primes against.
            for(uint i = 3 ; i <= sqrtN; i += 2)
            {
                if( n % i == 0 )
                {
                    if( isPrime(filter, i) )
                    {
                        filter.Add(i);
                        largestPrimeFactor = i > largestPrimeFactor ? i : largestPrimeFactor;
                    }
                }
            }
            for(uint i = 2 ; i < sqrtN ; i++ )
            {
                if( n % i == 0 ) 
                {
                    if( isPrime(filter, (n / i) ) )
                    {
                        largestPrimeFactor = n / i > largestPrimeFactor ? (uint)(n / i) : largestPrimeFactor;
                        break;
                    }
                }
                if( (n / i) < largestPrimeFactor )
                {
                    break;
                }
            }
            return largestPrimeFactor;
        }

        private static bool isPrime (List<uint> filter, long query)
        {
            // Given a filter List of prime numbers from 0 to √n, isPrime will determine if a number from 0 to n is Prime
            bool isPrime = true;
            foreach(uint prime in filter)
            {
                if( query % prime == 0 )
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

        private static bool isPrime (List<uint> filter, uint query)
        {
            // Given a filter List of prime numbers from 0 to √n, isPrime will determine if a number from 0 to n is Prime
            bool isPrime = true;
            foreach(uint prime in filter)
            {
                if( query % prime == 0 )
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

        // Problem #3: Alternate solution
        public static int altLgPrimeFactor (long n)
        {
            for( int i = 2 ; i < n ; i++ )
            {
                while( n % i == 0 )
                {
                    n = n/i;
                }
            }
            return (int)n;
        }

        // Problem #4: 
        public static int LargestPalindromeProd () 
        {
//          A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//          Find the largest palindrome made from the product of two 3-digit numbers.

            // x * y = z, where z is a palindrome, x and y are both 3-digit numbers.

            int z = 997799;
            int[] palindrome = new int[] {9,9,7,7,9,9};
            bool validPal = false;

            while( !validPal )
            {
                for(int x = 999 ; x >= 100 ; x-- )
                {
                    if( z % x == 0 && (999 >= z/x && z/x >= 100) )
                    {
                        validPal = true;
                        break;
                    }
                    // Since x is ALWAYS decrementing, y will always be incrementing.  Therefore we skip to the next x if y
                    // ever exceeds 3 digits.
                    if( z / x > 999 )
                    {
                        break;
                    }
                }

                if( !validPal )
                {
                    if( palindrome[2] > 0 )
                    {
                        palindrome[2]--;
                        palindrome[3]--;
                    }
                    else if( palindrome[1] > 0 )
                    {
                        palindrome[1]--;
                        palindrome[4]--;
                        palindrome[2] = 9;
                        palindrome[3] = 9;
                    }
                    else
                    {
                        palindrome[0]--;
                        palindrome[5]--;
                        palindrome[1] = 9;
                        palindrome[4] = 9;
                    }
                }
                z = Int32.Parse(string.Join("", palindrome));
            }
            return z;
        }

        // Problem #5:
        public static int smallestMultiple(int target)
        {
//          2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//          What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

            int result = 20;
            bool isMultiple = false;
            while( !isMultiple )
            {
                for( int i = target - 1 ; i > 1 ; i-- )
                {
                    if( !(result % i == 0) )
                    {
                        break;
                    }
                    else if( i == 2 )
                    {
                        isMultiple = true;
                    }
                }
                if( !isMultiple )
                {
                    result += 20;
                }
            }
            return result;
        }

        // Problem #6:
        public static double sumSquareDifference (int target)
        {
            double sumSquares = 1, squareSum = 1;
            for( int i = 2 ; i <= target ; i++ )
            {
                sumSquares += Math.Pow(i,2);
                squareSum += i;
                Console.WriteLine("sumSquares: {0}, squareSum: {1}, i: {2}", sumSquares, squareSum, i);
            }
            return Math.Pow (squareSum, 2) - sumSquares;
        }
	}
}
