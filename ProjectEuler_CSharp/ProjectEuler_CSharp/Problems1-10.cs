using System;
using System.Linq;
using System.Collections.Generic;

namespace ProjectEuler_CSharp
{
	public class Problems_1_Thru_10
	{
//		Problem #1:
		public static int Multiples3and5 ()
		{
//			If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
//			The sum of these multiples is 23.
//			Find the sum of all the multiples of 3 or 5 below 1000.

//			Collect all multiples from 0 to 1000:
			List<int> multiples = new List<int> ();
			for (int i = 3; i < 1000; i++) 
			{
				if( i % 3 == 0 || i % 5 == 0 )
				{
					multiples.Add(i);
				}
			}

//			Sum all numbers in collection:
			return multiples.Aggregate ((current, total) => current + total);
		}

//		Problem #2:
		public static long EvenFib ()
		{
//			Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
//			By starting with 1 and 2, the first 10 terms will be:
//				1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//			By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

			int a = 1, b = 2, temp;
			long result = 0;
			while( b < 4000000 )
			{
				if( b % 2 == 0 )
				{
					result += b;
			    }
                temp = a + b;
                a = b;
                b = temp;
			}
            return result;
		}

//      Problem #3:
        public static uint LargestPrime(long n)
        {
//          The prime factors of 13195 are 5, 7, 13 and 29.
//          What is the largest prime factor of the number 600851475143 ?

            uint largestPrimeFactor = 1;

            // In order to determine all prime numbers from 0 to n, we only need to check them against
            // values from 0 to √n.  If they are not divisible by any of these numbers, then they are prime.
            uint sqrtN = (uint)Math.Floor (Math.Sqrt(n));

            // We create a filter list which contains all primes from 0 to √n. We can use this to check if a number
            // between 0 and n is prime.
              // We will start our List with 2, so that we only need to iterate on odd numbers.
            List<uint> filter = new List<uint>(new uint[] {2});

            // We create the filter list from 0 -> √n, the only numbers we need to check all future primes against.
            for(uint i = 3 ; i <= sqrtN; i += 2)
            {
                if( n % i == 0 )
                {
                    if( isPrime(filter, i) )
                    {
                        filter.Add(i);
                        largestPrimeFactor = i > largestPrimeFactor ? i : largestPrimeFactor;
                    }
                }
            }
            for(uint i = 2 ; i < sqrtN ; i++ )
            {
                if( n % i == 0 ) 
                {
                    if( isPrime(filter, (n / i) ) )
                    {
                        largestPrimeFactor = n / i > largestPrimeFactor ? (uint)(n / i) : largestPrimeFactor;
                        break;
                    }
                }
                if( (n / i) < largestPrimeFactor )
                {
                    break;
                }
            }
            return largestPrimeFactor;
        }

        private static bool isPrime (List<uint> filter, long query)
        {
            // Given a filter List of prime numbers from 0 to √n, isPrime will determine if a number from 0 to n is Prime
            bool isPrime = true;
            foreach(uint prime in filter)
            {
                if( query % prime == 0 )
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

        private static bool isPrime (List<long> filter, long query)
        {
            // Given a filter List of prime numbers from 0 to √n, isPrime will determine if a number from 0 to n is Prime
            bool isPrime = true;
            foreach(long prime in filter)
            {
                if( query % prime == 0 )
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

        // Problem #3: Alternate solution
        public static int altLgPrimeFactor (long n)
        {
            for( int i = 2 ; i < n ; i++ )
            {
                while( n % i == 0 )
                {
                    n = n/i;
                }
            }
            return (int)n;
        }

        // Problem #4: 
        public static int LargestPalindromeProd () 
        {
//          A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//          Find the largest palindrome made from the product of two 3-digit numbers.

            // x * y = z, where z is a palindrome, x and y are both 3-digit numbers.

            int z = 997799;
            int[] palindrome = new int[] {9,9,7,7,9,9};
            bool validPal = false;

            while( !validPal )
            {
                for(int x = 999 ; x >= 100 ; x-- )
                {
                    if( z % x == 0 && (999 >= z/x && z/x >= 100) )
                    {
                        validPal = true;
                        break;
                    }
                    // Since x is ALWAYS decrementing, y will always be incrementing.  Therefore we skip to the next x if y
                    // ever exceeds 3 digits.
                    if( z / x > 999 )
                    {
                        break;
                    }
                }

                if( !validPal )
                {
                    if( palindrome[2] > 0 )
                    {
                        palindrome[2]--;
                        palindrome[3]--;
                    }
                    else if( palindrome[1] > 0 )
                    {
                        palindrome[1]--;
                        palindrome[4]--;
                        palindrome[2] = 9;
                        palindrome[3] = 9;
                    }
                    else
                    {
                        palindrome[0]--;
                        palindrome[5]--;
                        palindrome[1] = 9;
                        palindrome[4] = 9;
                    }
                }
                z = Int32.Parse(string.Join("", palindrome));
            }
            return z;
        }

        // Problem #5:
        public static int smallestMultiple(int target)
        {
//          2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//          What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

            int result = 20;
            bool isMultiple = false;
            while( !isMultiple )
            {
                for( int i = target - 1 ; i > 1 ; i-- )
                {
                    if( !(result % i == 0) )
                    {
                        break;
                    }
                    else if( i == 2 )
                    {
                        isMultiple = true;
                    }
                }
                if( !isMultiple )
                {
                    result += 20;
                }
            }
            return result;
        }

        // Problem #6:
        public static double sumSquareDifference (int target)
        {
            double sumSquares = 1, squareSum = 1;
            for( int i = 2 ; i <= target ; i++ )
            {
                sumSquares += Math.Pow(i,2);
                squareSum += i;
            }
            return Math.Pow (squareSum, 2) - sumSquares;
        }

        // Problem #7:
        public static double NthPrime (int n)
        {
//          By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
//          What is the 10 001st prime number?

            // Also implement using the sieve refined in Problem 3
            int count = 1;
            List<uint> filter = new List<uint>(new uint[]{2});

            for(uint i = 3 ; count < n ; i += 2 )
            {
                if( isPrime(filter, i) )
                {
                    filter.Add(i);
                    count += 1;
                }
            }
            return filter.Last();
        }

        // Problem #8:
        public static long largestProductInSeries (int prodLength)
        {
//          The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
            string series = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
//          Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

            long maxProduct = 0, runningProd = 1;
            for(int startIndex = 0 ; startIndex <= series.Length - prodLength ; startIndex++ )
            {
                for(int i = startIndex ; i - startIndex < prodLength ; i++ )
                {
                    runningProd *= (long)Char.GetNumericValue(series[i]);
                }
                maxProduct = runningProd > maxProduct ? runningProd : maxProduct;
                runningProd = 1;
            }
            return maxProduct;
        }

        // Problem #9:
        public static int pythTriplet () {
            int a = 1, b;
            double c;
            int result = 0;
            while( result == 0 )
            {
                b = a + 1;
                c = Math.Sqrt((Math.Pow (a, 2) + Math.Pow (b,2)));
                while( a + b + c <= 1000 )
                {
                    c = Math.Sqrt((Math.Pow (a, 2) + Math.Pow (b,2)));
                    if( a + b + c == 1000 && c % 1 == 0 && a < b && b < c )
                    {
                        result = a * b * (int)c;
                        break;
                    }
                    else
                    {
                        b++;
                    }
                }
                a++;
            }
            return result;
        }

        // Problem #10:
        public static long primeSum()
        {
//          The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.              
//          Find the sum of all the primes below two million.

            long sum = 2;
            List<long> filter = new List<long>(new long[] {2});
            for( long i = 3 ; i < Math.Sqrt(2000000) ; i += 2 )
            {
                if( isPrime(filter, i) )
                {
                    filter.Add (i);
                    sum += i;
                }
            }
            for( long i = (long)Math.Floor (Math.Sqrt(2000000)) ; i < 2000000 ; i++)
            {
                if( isPrime(filter, i) )
                {
                    sum += i;
                }
            }
            return sum;
        }
	}
}






