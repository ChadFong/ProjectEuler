using System;
using System.Linq;
using System.Collections.Generic;

namespace ProjectEuler_CSharp
{
	public class Problems_1_Thru_10
	{
//		Problem #1:
		public static int Multiples3and5 ()
		{
//			If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
//			The sum of these multiples is 23.
//			Find the sum of all the multiples of 3 or 5 below 1000.

//			Collect all multiples from 0 to 1000:
			List<int> multiples = new List<int> ();
			for (int i = 3; i < 1000; i++) 
			{
				if( i % 3 == 0 || i % 5 == 0 )
				{
					multiples.Add(i);
				}
			}

//			Sum all numbers in collection:
			return multiples.Aggregate ((current, total) => current + total);
		}

//		Problem #2:
		public static long EvenFib ()
		{
//			Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
//			By starting with 1 and 2, the first 10 terms will be:
//				1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//			By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

			int a = 1, b = 2, temp;
			long result = 0;
			while( b < 4000000 )
			{
				if( b % 2 == 0 )
				{
					result += b;
			    }
                temp = a + b;
                a = b;
                b = temp;
			}
            return result;
		}

//      Problem #3:
        public static uint LargestPrime(long n)
        {
//          The prime factors of 13195 are 5, 7, 13 and 29.
//          What is the largest prime factor of the number 600851475143 ?

            uint largestPrimeFactor = 1;

            // In order to determine all prime numbers from 0 to n, we only need to check them against
            // values from 0 to √n.  If they are not divisible by any of these numbers, then they are prime.
            uint sqrtN = (uint)Math.Floor (Math.Sqrt(n));
            Console.WriteLine(sqrtN);

            // We create a filter list which contains all primes from 0 to √n. We can use this to check if a number
            // between 0 and n is prime.
              // We will start our List with 2, so that we only need to iterate on odd numbers.
            List<uint> filter = new List<uint>(new uint[] {2});

            // We create the filter list from 0 -> √n, the only numbers we need to check all future primes against.
            for(uint i = 3 ; i <= sqrtN; i += 2)
            {
                if( n % i == 0 )
                {
                    if( isPrime(filter, i) )
                    {
                        filter.Add(i);
                        largestPrimeFactor = i > largestPrimeFactor ? i : largestPrimeFactor;
                    }
                }
            }
            for(uint i = 2 ; i < sqrtN ; i++ )
            {
                if( n % i == 0 ) 
                {
                    if( isPrime(filter, (n / i) ) )
                    {
                        largestPrimeFactor = n / i > largestPrimeFactor ? (uint)(n / i) : largestPrimeFactor;
                        break;
                    }
                }
                if( (n / i) < largestPrimeFactor )
                {
                    break;
                }
            }
            return largestPrimeFactor;
        }

        private static bool isPrime (List<uint> filter, long query)
        {
            // Given a filter List of prime numbers from 0 to √n, isPrime will determine if a number from 0 to n is Prime
            bool isPrime = true;
            foreach(uint prime in filter)
            {
                if( query % prime == 0 )
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

        private static bool isPrime (List<uint> filter, uint query)
        {
            // Given a filter List of prime numbers from 0 to √n, isPrime will determine if a number from 0 to n is Prime
            bool isPrime = true;
            foreach(uint prime in filter)
            {
                if( query % prime == 0 )
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

        // Problem #3: Alternate solution
        public static int altLgPrimeFactor (long n)
        {
            for( int i = 2 ; i < n ; i++ )
            {
                while( n % i == 0 )
                {
                    n = n/i;
                }
            }
            return (int)n;
        }
	}
}
